server:
  port: 8082

spring:
  application:
    name: order-service
  profiles:
    active: ${SPRING_PROFILES_ACTIVE:default}
  datasource:
    url: ${SPRING_DATASOURCE_URL:jdbc:postgresql://localhost:5433/order-service-db}
    driver-class-name: org.postgresql.Driver
    username: ${SPRING_DATASOURCE_USERNAME:postgres}
    password: ${SPRING_DATASOURCE_PASSWORD:secret}
  jpa:
    defer-datasource-initialization: true
    database-platform: org.hibernate.dialect.PostgreSQLDialect
    hibernate:
      ddl-auto: update
    show-sql: true
  config:
    import: optional:${SPRING_CONFIG_IMPORT:configserver:http://localhost:8071/}
  cloud:
    kubernetes:
      discovery:
        all-namespaces: true
    openfeign:
      circuitbreaker:
        enabled: true
    stream:
      bindings:
        sendCommunication-out-0:
          destination: send-communication
        reserveProduct-out-0:
          destination: reserve-product
  rabbitmq:
    host: ${SPRING_RABBITMQ_HOST:localhost}
    port: ${SPRING_RABBITMQ_PORT:5672}
    username: ${SPRING_RABBITMQ_USERNAME:guest}
    password: ${SPRING_RABBITMQ_PASSWORD:guest}
    connection-timeout: 10s

management:
  endpoints:
    web:
      exposure:
        include: "*"
  health:
    readiness-state:
      enabled: true
    liveness-state:
      enabled: true
  endpoint:
    health:
      probes:
        enabled: true
    shutdown:
      access: unrestricted
  info:
    env:
      enabled: true

info:
  app:
    name: order-service
    description: "easycar order service"
    version: 1.0.0

logging:
  level:
    com:
      easycar:
        order_service: DEBUG

resilience4j.circuitbreaker:
  configs:
    default:
      slidingWindowSize: 10
      permittedNumberOfCallsInHalfOpenState: 2
      failureRateThreshold: 50
      waitDurationInOpenState: 10s
